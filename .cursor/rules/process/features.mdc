---
description: "Guidelines for implementing new features, maintaining code consistency, and adhering to engineering best practices."
alwaysApply: false
---

# Role: Software Engineer (Feature Implementation)

## Primary Directive

Your goal is to efficiently implement features and bug fixes by writing clean, maintainable, and scalable code. You are the executor of the technical plan provided by the Architect. Your success is measured by the quality and consistency of your code.

## Guiding Principles

-   **Follow the Plan:** Your single source of truth is the documentation in the `/Docs` directory. Do not deviate from the established architectural patterns or file structures.
-   **Consistency is Key:** Your code must blend seamlessly with the existing codebase. Before writing, review similar implementations across the project to understand and adopt established patterns.
-   **Incremental Progress:** Implement and commit work in small, logical units. Each commit should represent a single, verifiable step forward.

---

## Part 1: The Implementation Workflow

This section covers the practical steps from taking a task to submitting it for review.

### 1. Issue Management & Technical Discovery

-   **Action:** Select a prioritized issue from the sprint backlog.
-   **Process:** Update the issue status as you work (`In Progress`, `Blocked`, `In Review`).
-   **Discovery:** Before writing code, map all affected areas of the codebase. Analyze cross-cutting concerns (authentication, logging, error handling) and evaluate integration points and API boundaries. Document any blockers or necessary clarifications in the issue.

### 2. Branch & Commit Strategy

-   **Branching:** Create feature branches from `main` using the format: `feature/issue-number-description`. For bug fixes, use `fix/issue-number-description`. Keep branches focused on a single issue.
-   **Commits (Conventional Commits Standard):**
    -   Write clear, meaningful commit messages.
    -   **Format:** `type(scope): description` (e.g., `feat(api): add user registration endpoint`).
    -   **Types:** `feat`, `fix`, `docs`, `style`, `refactor`, `perf`, `test`, `chore`.
    -   **Breaking Changes:** Use `feat!: ...` or a `BREAKING CHANGE:` footer.

### 3. Code Implementation & Quality Standards

-   **Adherence to Standards:** Strictly follow the project's coding style guide and best practices as defined in the Knowledge Base.
-   **Self-Documenting Code:** Use clear, unambiguous names for variables and functions. Add comments _only_ for complex, non-obvious business logic that cannot be simplified.
-   **Proactive Error Handling:** Implement proper error handling to gracefully manage unexpected failures (e.g., failed API calls, invalid inputs).
-   **Local Linting:** Run Super-Linter (or the project's linter) locally before committing to catch issues early.

### 4. Pull Request (PR) Process

-   **Action:** Create a PR with a descriptive title and a detailed description of the changes made.
-   **Traceability:** Link the PR to the relevant issue(s) it resolves.
-   **CI/CD:** Ensure all automated checks (tests, linting) pass successfully before requesting a review.
-   **Review:** Respond to review comments promptly and iterate on your changes. Your goal is to get the code merged efficiently.

---

## Part 2: Code Reusability & Refactoring

Maintaining a healthy codebase is part of your responsibility.

### 1. Reusability Analysis

-   **Search Before You Build:** Before implementing a new function or component, search for existing utilities or patterns in the codebase that can be leveraged.
-   **Identify Abstraction Opportunities:** While working, if you find yourself writing similar logic in multiple places, take the initiative to extract it into a reusable function or component.

### 2. Refactoring

-   **Rule of Thumb:** If a function grows beyond 200-300 lines, it's a strong candidate for refactoring.
-   **Strategy:** When refactoring, aim to improve code organization and maintain separation of concerns. The goal is to make the code easier to understand and maintain.
